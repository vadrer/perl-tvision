
TYPEMAP
TVApp*  O_TVApp
TApplication*  O_TApplication
TDeskTop*  O_TDeskTop
TButton*  O_TButton
TMenu*  O_TMenu
TGroup*  O_TGroup
TWindow*  O_TWindow
TEditWindow*  O_TEditWindow
TView*  O_TView
TInputLine*  O_TInputLine
TLabel*  O_TLabel
TStaticText*  O_TStaticText
TStatusLine*  O_TStatusLine
TStatusDef*  O_TStatusDef
TStatusItem*  O_TStatusItem
TCheckBoxes*  O_TCheckBoxes
TRadioButtons*  O_TRadioButtons
TScroller*  O_TScroller
TScrollBar*  O_TScrollBar
TIndicator*  O_TIndicator
TEditor*  O_TEditor
TDialog*  O_TDialog
TScreen*  O_TScreen
TSItem*  O_TSItem
TMenuItem*  O_TMenuItem
TMenuBar*  O_TMenuBar
TSubMenu*  O_TSubMenu
TValidator*  O_TValidator


INPUT
O_TVApp
  $var = (TVApp*)sv2tv_a($arg);
O_TApplication
  $var = (TApplication*)sv2tv_a($arg);
O_TDeskTop
  $var = (TDeskTop*)sv2tv_a($arg);
O_TButton
  $var = (TButton*)sv2tv_a($arg);
O_TMenu
  $var = (TMenu*)sv2tv_a($arg);
O_TGroup
  $var = (TGroup*)sv2tv_a($arg);
O_TWindow
  $var = (TWindow*)sv2tv_a($arg);
O_TEditWindow
  $var = (TEditWindow*)sv2tv_a($arg);
O_TView
  $var = (TView*)sv2tv_a($arg);
O_TInputLine
  $var = (TInputLine*)sv2tv_a($arg);
O_TLabel
  $var = (TLabel*)sv2tv_a($arg);
O_TStaticText
  $var = (TStaticText*)sv2tv_a($arg);
O_TStatusLine
  $var = (TStatusLine*)sv2tv_a($arg);
O_TStatusDef
  $var = (TStatusDef*)sv2tv_a($arg);
O_TStatusItem
  $var = (TStatusItem*)sv2tv_a($arg);
O_TCheckBoxes
  $var = (TCheckBoxes*)sv2tv_a($arg);
O_TRadioButtons
  $var = (TRadioButtons*)sv2tv_a($arg);
O_TScroller
  $var = (TScroller*)sv2tv_a($arg);
O_TScrollBar
  $var = (TScrollBar*)sv2tv_a($arg);
O_TIndicator
  $var = (TIndicator*)sv2tv_a($arg);
O_TEditor
  $var = (TEditor*)sv2tv_a($arg);
O_TDialog
  $var = (TDialog*)sv2tv_a($arg);
O_TScreen
  $var = (TScreen*)sv2tv_a($arg);
O_TSItem
  $var = (TSItem*)sv2tv_a($arg);
O_TMenuItem
  $var = (TMenuItem*)sv2tv_a($arg);
O_TMenuBar
  $var = (TMenuBar*)sv2tv_a($arg);
O_TSubMenu
  $var = (TSubMenu*)sv2tv_a($arg);
O_TValidator
  $var = (TValidator*)sv2tv_a($arg);


OUTPUT
O_Xxxxx
    // Look in TVision.cpp: var=$var arg=$arg type=$type Package=$Package
    // they give us in $arg the RETVALSV = sv_newmortal();
    // need to make rv out of it, pointing to new AV
    // TODO: is it possible to upgrade provided SV rather than ignoring it?
    // TODO: polish refcounts and other memory leaks here
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TVApp
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TApplication
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TDeskTop
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TButton
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
    av_store(self, 1, newSViv(cmd));  /*this cmd is very wrong here*/
O_TMenu
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TGroup
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TWindow
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TEditWindow
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TView
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TInputLine
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TLabel
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TStaticText
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TStatusLine
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TStatusDef
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TStatusItem
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TCheckBoxes
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TRadioButtons
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TScroller
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TScrollBar
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TIndicator
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TEditor
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TDialog
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TScreen
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TSItem
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TMenuItem
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TMenuBar
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TSubMenu
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));
O_TValidator
    AV *self = newAV();
    av_store(self, 0, newSVpvn((const char *)&$var, sizeof($var)));
    $arg = newRV_inc((SV*) self);
    sv_bless($arg, gv_stashpv("$Package", GV_ADD));

